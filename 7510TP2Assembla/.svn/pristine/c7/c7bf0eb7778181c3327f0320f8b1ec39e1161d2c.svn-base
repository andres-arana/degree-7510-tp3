package modelo;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import java.util.Observable;

public class Venta extends Observable implements IVenta  {
	private enum UltimoLineItem { OFERTA, PRODUCTO}
	private List<LineItemProducto> items;
	private List<LineItemOferta> ofertasAplicadas;
	private LineItemFactory lineItemFactory;
	private UltimoLineItem ultimoLineItem;
	private double descuentoAlTotalDeLaVenta;
	private String detalleOfertaTotalVenta;
	private String formaDePago;
	private Calendar fechaVenta;
	int nroCaja;
	
	public List<LineItemProducto> getProductos() {
		return Collections.unmodifiableList(items);
	}
	
	public Venta(Calendar fechaVenta, int nroCaja) {
		this.items = new ArrayList<LineItemProducto>();
		this.ofertasAplicadas = new ArrayList<LineItemOferta>();
		this.lineItemFactory = new LineItemFactory();
		this.descuentoAlTotalDeLaVenta = 0;
		this.detalleOfertaTotalVenta = "";
		this.fechaVenta = fechaVenta;
		this.formaDePago = "";
		this.nroCaja = nroCaja;
	}	
	
	@Override
	public void cobrar(String medioDePago) {
		this.formaDePago = medioDePago;
		addOferta(detalleOfertaTotalVenta, 1, getTotal() * descuentoAlTotalDeLaVenta);
	}
	
	@Override
	public double getTotal() {
		return getTotalSinDescuentos() - getTotalDescuentos();
	}
	
	@Override
	public double getTotalDescuentos() {
		int total = 0;
		for (LineItem i : ofertasAplicadas) {
			total += i.montoTotal();
		}
		return total;
	}

	@Override
	public double getTotalSinDescuentos() {
		int total = 0;
		for(LineItem i : items) {
			total += i.montoTotal();
		}
		return total;
	}	

	public List<LineItemOferta> getOfertasAplicadas()
	{
		return this.ofertasAplicadas;
	}
	
	@Override
	public void addProducto(Producto producto, int cantidad) {
		LineItemProducto item = lineItemFactory.lineItemProducto(producto, cantidad);		
		items.add(item);
		ultimoLineItem = UltimoLineItem.PRODUCTO;
		setChanged();
		notifyObservers();
	}
	
	@Override
	public void addOferta(String detalle, int cantidad, double montoUnitario) {
		LineItemOferta lineItemOferta = lineItemFactory.lineItemOferta(detalle, cantidad, montoUnitario);
		ofertasAplicadas.add(lineItemOferta);
		ultimoLineItem = UltimoLineItem.OFERTA;
		setChanged();
		notifyObservers();
	}	

	@Override
	public String getMedioDePago() {
		return formaDePago;
	}
	
	@Override
	public Calendar getFecha() {
		return fechaVenta;
	}	
	
	@Override
	public String getUltimaLinea() {
		if (ultimoLineItem == UltimoLineItem.PRODUCTO)
			return getUltimoLineItemProducto().toString();
		else
			return getUltimoLineItemOferta().toString();
	}

	private LineItem getUltimoLineItemOferta() {
		return ofertasAplicadas.get(ofertasAplicadas.size() - 1);
	}

	private LineItem getUltimoLineItemProducto() {
		return items.get(items.size() - 1);
	}

	@Override
	public int getCajaNro() {
		return nroCaja;
	}
	
	@Override
	public void aplicarDescuentoAlTotal(double descuento, String detalleOferta) {
		if (descuento > descuentoAlTotalDeLaVenta) {
			descuentoAlTotalDeLaVenta = descuento;
			detalleOfertaTotalVenta = detalleOferta;
		}		
	}

	@Override
	public void marcarProductosOfertados(Producto producto, int cantidad) {
		int marcados = 0;
		int dif;
		for (LineItemProducto i : items) {
			if ((i.getIdProducto() == producto.getId()) && (i.getProductosConOfertasPorProductoAplicadas() < i.getCantidad())) {
				dif = i.getCantidad() - i.getProductosConOfertasPorProductoAplicadas();
				if (cantidad - marcados > dif) {
					i.setProductosConOfertasPorProductoAplicadas(cantidad - marcados);
					break;
				} 
				else {
					i.setProductosConOfertasPorProductoAplicadas(dif);
					marcados += dif;
				}						
			}
		}		
	}

	@Override
	public void marcarProductosOfertadosPorMarca(int cantidad, String marca) {
		int marcados = 0;
		int dif;
		for (LineItemProducto i : items) {
			if ((i.getMarcaProducto() == marca) && (i.getProductosConOfertasPorProductoAplicadas() < i.getCantidad())) {
				dif = i.getCantidad() - i.getProductosConOfertasPorProductoAplicadas();
				if (cantidad - marcados > dif) {
					i.setProductosConOfertasPorProductoAplicadas(cantidad - marcados);
					break;
				} 
				else {
					i.setProductosConOfertasPorProductoAplicadas(dif);
					marcados += dif;
				}						
			}
		}				
	}

	@Override
	public void marcarProductosOfertadosPorCategoria(int cantidad, String categoria) {
		int marcados = 0;
		int dif;
		for (LineItemProducto i : items) {
			if ((i.getMarcaProducto() == categoria) && (i.getProductosConOfertasPorProductoAplicadas() < i.getCantidad())) {
				dif = i.getCantidad() - i.getProductosConOfertasPorProductoAplicadas();
				if (cantidad - marcados > dif) {
					i.setProductosConOfertasPorProductoAplicadas(cantidad - marcados);
					break;
				} 
				else {
					i.setProductosConOfertasPorProductoAplicadas(dif);
					marcados += dif;
				}						
			}
		}		
	}

	@Override
	public void marcarTodosLosProductosOfertadosPorCategoria(String categoria,
			List<Producto> excepciones) {
		for (LineItemProducto i : items) {
			if ((i.getMarcaProducto() == categoria) && noEsUnaExcepcion(i.getIdProducto(), excepciones)) {
				i.setProductosConOfertasPorCategoriaOMarcaAplicadas(i.getCantidad());
			}
		}		
	}

	private boolean noEsUnaExcepcion(int idProducto, List<Producto> excepciones) {
		for (Producto p : excepciones) {
			if (p.getId() == idProducto)
				return false;
		}
		return true;
	}

	@Override
	public void marcarTodosLosProductosOfertadosPorMarca(String marca,
			List<Producto> excepciones) {
		for (LineItemProducto i : items) {
			if ((i.getMarcaProducto() == marca) && noEsUnaExcepcion(i.getIdProducto(), excepciones)) {
				i.setProductosConOfertasPorCategoriaOMarcaAplicadas(i.getCantidad());
			}
		}		
	}
	
}
