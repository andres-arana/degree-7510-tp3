package modelo;

import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Observable;
import java.util.Observer;

import datos.InyectorDeDatos;


public class Caja implements Observer {
	private IEstadoCaja estadoCaja;
	private VentasRepository repositorioVentas;
	private OfertasRepository repositorioOfertas;
	private IVenta ventaEnCurso;
	private int cajaNro;
	private String sucursal;
	
	public int getCajaNro() {
		return cajaNro;
	}

	public String getSucursal() {
		return sucursal;
	}

	public Caja(int cajaNro, String sucursal, OfertasRepository ofertasRepository) {
		this.repositorioVentas = new VentasRepository();
		this.repositorioOfertas = ofertasRepository;
		this.cajaNro = cajaNro;
		this.sucursal = sucursal;
		ventaEnCurso = new Venta(Calendar.getInstance(), cajaNro);
		estadoCaja = CajaCerrada.getInstance();
	}
	
	public void abrirCaja(){
		estadoCaja.puedeAbrirCaja();
		estadoCaja = CajaAbierta.getInstance();		
	}
	
	public void addProducto(Producto producto, int cantidad) {
		estadoCaja.puedeAgregarProducto();
		ventaEnCurso.addProducto(producto, cantidad);
		repositorioOfertas.aplicarOfertas(ventaEnCurso);
	}
	
	public void iniciarVenta() {
		estadoCaja.puedeIniciarVenta();
		ventaEnCurso = new Venta(Calendar.getInstance(), cajaNro);
		((Venta)ventaEnCurso).addObserver(this);
		estadoCaja = CajaEfectuandoVenta.getInstance();
		imprimirCabecera();
	}
		
	public void confirmarVenta(String formaDePago) {
		estadoCaja.puedeConfirmarVenta();
		ventaEnCurso.setFormaDePago(formaDePago);
		repositorioOfertas.aplicarOfertas(ventaEnCurso);
		ventaEnCurso.cobrar();
		imprimirTotal();
		repositorioVentas.add(ventaEnCurso);
		estadoCaja = CajaAbierta.getInstance();
	}
	
	public void cancelarVenta() {
		estadoCaja.puedeCancelarventa();
		imprimirVentaCancelada();
		estadoCaja = CajaAbierta.getInstance();
	}	
	
	public void cerrarCaja() {
		estadoCaja.puedeCerrarCaja();
		estadoCaja = CajaCerrada.getInstance();
	}	

	@Override
	public void update(Observable o, Object arg) {
		imprimirLinea();		
	}
	
	private void imprimirLinea() {
		System.out.println(ventaEnCurso.getUltimaLinea());
	}
	
	private void imprimirTotal() {
		DecimalFormat df = new DecimalFormat("0.00");
		System.out.println("Total de la compra sin descuentos: " + df.format(ventaEnCurso.getTotalSinDescuentos()));
		System.out.println("Total descuentos: " + df.format(ventaEnCurso.getTotalDescuentos()));
		System.out.println("Total de la compra: " + df.format(ventaEnCurso.getTotal()));
	}
	
	private void imprimirVentaCancelada() {
		System.out.println("Compra Cancelada");
	}
	
	private void imprimirCabecera() {
		System.out.println();
		System.out.println("Bienvenido al Supermercado Sin Nombre");
		System.out.println("Sucursal: " + sucursal + " Caja: " + cajaNro);
	}	
}
